{"version":3,"sources":["components/ImageUploader.js","App.js","reportWebVitals.js","index.js"],"names":["ImageUploader","selectedImage","setSelectedImage","useState","prediction","setPrediction","loading","setLoading","error","setError","previewUrl","setPreviewUrl","DISEASE_CLASSES","name","description","icon","_jsx","className","children","_jsxs","type","onChange","event","file","target","files","URL","createObjectURL","accept","id","htmlFor","onClick","async","formData","FormData","append","response","fetch","method","body","ok","Error","status","data","json","Array","isArray","probabilities","predictionResult","map","disease","index","probability","percentage","toFixed","sort","a","b","console","message","disabled","_Fragment","role","src","alt","style","maxHeight","item","height","width","App","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.eeb27659.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction ImageUploader() {\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [prediction, setPrediction] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [previewUrl, setPreviewUrl] = useState(null);\n\n  // Map numerical predictions to disease names with descriptions\n  const DISEASE_CLASSES = [\n    {\n      name: \"Healthy\",\n      description: \"No signs of disease detected\",\n      icon: \"âœ…\"\n    },\n    {\n      name: \"Newcastle Disease\",\n      description: \"Highly contagious viral disease affecting respiratory, nervous and digestive systems\",\n      icon: \"ðŸ¦ \"\n    },\n    {\n      name: \"Avian Influenza\",\n      description: \"Also known as bird flu, can range from mild to severe\",\n      icon: \"ðŸ¤’\"\n    },\n    {\n      name: \"Infectious Bronchitis\",\n      description: \"Acute, highly contagious respiratory disease\",\n      icon: \"ðŸ˜·\"\n    },\n    {\n      name: \"Marek's Disease\",\n      description: \"Viral disease causing tumors and paralysis\",\n      icon: \"ðŸ¦ \"\n    }\n  ];\n\n  const handleImageChange = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      setSelectedImage(file);\n      setPreviewUrl(URL.createObjectURL(file));\n      setPrediction(null);\n      setError(null);\n    }\n  };\n\n  const handleUpload = async () => {\n    if (!selectedImage) {\n      setError(\"Please select an image first\");\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"file\", selectedImage);\n\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/predict\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(`Server error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      if (data.prediction && Array.isArray(data.prediction[0])) {\n        const probabilities = data.prediction[0];\n        const predictionResult = DISEASE_CLASSES.map((disease, index) => ({\n          ...disease,\n          probability: probabilities[index],\n          percentage: (probabilities[index] * 100).toFixed(2)\n        }))\n        .sort((a, b) => b.probability - a.probability);\n        \n        setPrediction(predictionResult);\n      } else {\n        throw new Error(\"Unexpected prediction format\");\n      }\n    } catch (error) {\n      console.error(\"Error uploading image:\", error);\n      setError(`Error: ${error.message || \"Unable to process image\"}`);\n      setPrediction(null);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"container py-5\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-lg-8\">\n          <div className=\"card shadow\">\n            <div className=\"card-header bg-primary text-white\">\n              <h1 className=\"h4 mb-0 text-center\">Chicken Health Analyzer</h1>\n            </div>\n            <div className=\"card-body\">\n              <div className=\"text-center mb-4\">\n                <p className=\"lead\">\n                  Upload an image of your chicken to detect potential diseases\n                </p>\n              </div>\n\n              <div className=\"mb-4\">\n                <div className=\"d-flex flex-column flex-md-row gap-3 justify-content-center align-items-center\">\n                  <div className=\"custom-file-upload\">\n                    <input\n                      type=\"file\"\n                      onChange={handleImageChange}\n                      accept=\"image/*\"\n                      id=\"image-upload\"\n                      className=\"d-none\"\n                    />\n                    <label\n                      htmlFor=\"image-upload\"\n                      className=\"btn btn-outline-primary btn-lg\"\n                    >\n                      <i className=\"bi bi-cloud-arrow-up me-2\"></i>\n                      {selectedImage ? \"Change Image\" : \"Select Image\"}\n                    </label>\n                  </div>\n                  <button\n                    onClick={handleUpload}\n                    disabled={!selectedImage || loading}\n                    className=\"btn btn-success btn-lg\"\n                  >\n                    {loading ? (\n                      <>\n                        <span\n                          className=\"spinner-border spinner-border-sm me-2\"\n                          role=\"status\"\n                          aria-hidden=\"true\"\n                        ></span>\n                        Analyzing...\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"bi bi-search me-2\"></i>\n                        Analyze Image\n                      </>\n                    )}\n                  </button>\n                </div>\n              </div>\n\n              {error && (\n                <div className=\"alert alert-danger mt-3\">\n                  <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\n                  {error}\n                </div>\n              )}\n\n              {previewUrl && (\n                <div className=\"text-center mt-4\">\n                  <div className=\"mb-3\">\n                    <h3 className=\"h5\">Image Preview</h3>\n                  </div>\n                  <img\n                    src={previewUrl}\n                    alt=\"Preview\"\n                    className=\"img-fluid rounded shadow\"\n                    style={{ maxHeight: \"300px\" }}\n                  />\n                </div>\n              )}\n\n              {prediction && (\n                <div className=\"mt-5\">\n                  <div className=\"text-center mb-4\">\n                    <h2 className=\"h4\">Analysis Results</h2>\n                    <p className=\"text-muted\">\n                      Based on our AI analysis of your chicken's image\n                    </p>\n                  </div>\n\n                  <div className=\"alert alert-success\">\n                    <div className=\"d-flex align-items-center\">\n                      <div className=\"flex-shrink-0\">\n                        <i className=\"bi bi-check-circle-fill fs-4\"></i>\n                      </div>\n                      <div className=\"flex-grow-1 ms-3\">\n                        <h5 className=\"alert-heading mb-1\">\n                          Most Likely: {prediction[0].name}\n                        </h5>\n                        <p className=\"mb-0 small\">\n                          Confidence: {prediction[0].percentage}% - {prediction[0].description}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"mt-4\">\n                    <h5 className=\"mb-3\">Detailed Probabilities:</h5>\n                    <div className=\"list-group\">\n                      {prediction.map((item, index) => (\n                        <div\n                          key={index}\n                          className={`list-group-item ${index === 0 ? \"active\" : \"\"}`}\n                          aria-current={index === 0}\n                        >\n                          <div className=\"d-flex w-100 justify-content-between\">\n                            <h6 className=\"mb-1\">\n                              {item.icon} {item.name}\n                            </h6>\n                            <small>{item.percentage}%</small>\n                          </div>\n                          <p className=\"mb-1 small\">{item.description}</p>\n                          <div className=\"progress mt-2\" style={{ height: \"8px\" }}>\n                            <div\n                              className={`progress-bar ${index === 0 ? \"bg-success\" : \"bg-info\"}`}\n                              role=\"progressbar\"\n                              style={{ width: `${item.percentage}%` }}\n                              aria-valuenow={item.percentage}\n                              aria-valuemin=\"0\"\n                              aria-valuemax=\"100\"\n                            ></div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n            <div className=\"card-footer text-muted text-center small\">\n              <p className=\"mb-0\">\n                Note: Consult a veterinarian for professional diagnosis.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ImageUploader;","import React from \"react\";\nimport ImageUploader from \"./components/ImageUploader\";\n\nfunction App() {\n  return <ImageUploader />;\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}